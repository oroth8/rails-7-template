# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `figaro` gem.
# Please instead update this file by running `bin/tapioca gem figaro`.

module Figaro
  extend ::Figaro

  def adapter; end

  # Sets the attribute adapter
  #
  # @param value the value to set the attribute adapter to.
  def adapter=(_arg0); end

  def application; end

  # Sets the attribute application
  #
  # @param value the value to set the attribute application to.
  def application=(_arg0); end

  def env; end
  def load; end

  # @raise [MissingKeys]
  def require_keys(*keys); end
end

class Figaro::Application
  include ::Enumerable

  # @return [Application] a new instance of Application
  def initialize(options = T.unsafe(nil)); end

  def configuration; end
  def each(&block); end
  def environment; end
  def environment=(environment); end
  def load; end
  def path; end
  def path=(path); end

  private

  def default_environment; end

  # @raise [NotImplementedError]
  def default_path; end

  def environment_configuration; end
  def global_configuration; end
  def key_skipped!(key); end
  def non_string_configuration!(value); end
  def parse(path); end
  def raw_configuration; end
  def set(key, value); end

  # @return [Boolean]
  def skip?(key); end
end

Figaro::Application::FIGARO_ENV_PREFIX = T.let(T.unsafe(nil), String)

module Figaro::ENV
  extend ::Figaro::ENV

  # @return [Boolean]
  def respond_to?(method, *_arg1); end

  private

  def extract_key_from_method(method); end
  def get_value(key); end

  # @return [Boolean]
  def has_key?(key); end

  def method_missing(method, *_arg1); end

  # @raise [MissingKey]
  def missing_key!(key); end
end

class Figaro::Error < ::StandardError; end

class Figaro::MissingKey < ::Figaro::Error
  # @return [MissingKey] a new instance of MissingKey
  def initialize(key); end
end

class Figaro::MissingKeys < ::Figaro::Error
  # @return [MissingKeys] a new instance of MissingKeys
  def initialize(keys); end
end

module Figaro::Rails; end

class Figaro::Rails::Application < ::Figaro::Application
  private

  def default_environment; end
  def default_path; end

  # @raise [RailsNotInitialized]
  def rails_not_initialized!; end
end

class Figaro::Rails::Railtie < ::Rails::Railtie; end
class Figaro::RailsNotInitialized < ::Figaro::Error; end
