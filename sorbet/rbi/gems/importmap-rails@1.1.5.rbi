# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `importmap-rails` gem.
# Please instead update this file by running `bin/tapioca gem importmap-rails`.

module Importmap; end
class Importmap::Engine < ::Rails::Engine; end

module Importmap::ImportmapTagsHelper
  def javascript_import_module_tag(*module_names); end
  def javascript_importmap_module_preload_tags(importmap = T.unsafe(nil)); end
  def javascript_importmap_shim_nonce_configuration_tag; end
  def javascript_importmap_shim_tag(minimized: T.unsafe(nil)); end
  def javascript_importmap_tags(entry_point = T.unsafe(nil), shim: T.unsafe(nil)); end
  def javascript_inline_importmap_tag(importmap_json = T.unsafe(nil)); end
  def javascript_module_preload_tag(*paths); end
end

class Importmap::Map
  # @return [Map] a new instance of Map
  def initialize; end

  # Returns an instance ActiveSupport::EventedFileUpdateChecker configured to clear the cache of the map
  # when the directories passed on initialization via `watches:` have changes. This is used in development
  # and test to ensure the map caches are reset when javascript files are changed.
  def cache_sweeper(watches: T.unsafe(nil)); end

  # Returns a SHA1 digest of the import map json that can be used as a part of a page etag to
  # ensure that a html cache is invalidated when the import map is changed.
  #
  # Example:
  #
  #   class ApplicationController < ActionController::Base
  #     etag { Rails.application.importmap.digest(resolver: helpers) if request.format&.html? }
  #   end
  def digest(resolver:); end

  # Returns the value of attribute directories.
  def directories; end

  def draw(path = T.unsafe(nil), &block); end

  # Returns the value of attribute packages.
  def packages; end

  def pin(name, to: T.unsafe(nil), preload: T.unsafe(nil)); end
  def pin_all_from(dir, under: T.unsafe(nil), to: T.unsafe(nil), preload: T.unsafe(nil)); end

  # Returns an array of all the resolved module paths of the pinned packages. The `resolver` must respond to
  # `path_to_asset`, such as `ActionController::Base.helpers` or `ApplicationController.helpers`. You'll want to use the
  # resolver that has been configured for the `asset_host` you want these resolved paths to use. In case you need to
  # resolve for different asset hosts, you can pass in a custom `cache_key` to vary the cache used by this method for
  # the different cases.
  def preloaded_module_paths(resolver:, cache_key: T.unsafe(nil)); end

  # Returns a JSON hash (as a string) of all the resolved module paths of the pinned packages in the import map format.
  # The `resolver` must respond to `path_to_asset`, such as `ActionController::Base.helpers` or
  # `ApplicationController.helpers`. You'll want to use the resolver that has been configured for the `asset_host` you
  # want these resolved paths to use. In case you need to resolve for different asset hosts, you can pass in a custom
  # `cache_key` to vary the cache used by this method for the different cases.
  def to_json(resolver:, cache_key: T.unsafe(nil)); end

  private

  def absolute_root_of(path); end
  def cache_as(name); end
  def clear_cache; end
  def expand_directories_into(paths); end
  def expanded_packages_and_directories; end
  def expanded_preloading_packages_and_directories; end
  def find_javascript_files_in_tree(path); end
  def module_name_from(filename, mapping); end
  def module_path_from(filename, mapping); end

  # @return [Boolean]
  def rescuable_asset_error?(error); end

  def resolve_asset_paths(paths, resolver:); end
end

class Importmap::Map::InvalidFile < ::StandardError; end

class Importmap::Map::MappedDir < ::Struct
  # Returns the value of attribute dir
  #
  # @return [Object] the current value of dir
  def dir; end

  # Sets the attribute dir
  #
  # @param value [Object] the value to set the attribute dir to.
  # @return [Object] the newly set value
  def dir=(_); end

  # Returns the value of attribute path
  #
  # @return [Object] the current value of path
  def path; end

  # Sets the attribute path
  #
  # @param value [Object] the value to set the attribute path to.
  # @return [Object] the newly set value
  def path=(_); end

  # Returns the value of attribute preload
  #
  # @return [Object] the current value of preload
  def preload; end

  # Sets the attribute preload
  #
  # @param value [Object] the value to set the attribute preload to.
  # @return [Object] the newly set value
  def preload=(_); end

  # Returns the value of attribute under
  #
  # @return [Object] the current value of under
  def under; end

  # Sets the attribute under
  #
  # @param value [Object] the value to set the attribute under to.
  # @return [Object] the newly set value
  def under=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Importmap::Map::MappedFile < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute path
  #
  # @return [Object] the current value of path
  def path; end

  # Sets the attribute path
  #
  # @param value [Object] the value to set the attribute path to.
  # @return [Object] the newly set value
  def path=(_); end

  # Returns the value of attribute preload
  #
  # @return [Object] the current value of preload
  def preload; end

  # Sets the attribute preload
  #
  # @param value [Object] the value to set the attribute preload to.
  # @return [Object] the newly set value
  def preload=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Importmap::Reloader
  def execute(*_arg0, **_arg1, &_arg2); end
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end
  def reload!; end
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  def config; end
  def import_map_paths; end
  def updater; end
end

Importmap::VERSION = T.let(T.unsafe(nil), String)
