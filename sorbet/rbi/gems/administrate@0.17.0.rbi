# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `administrate` gem.
# Please instead update this file by running `bin/tapioca gem administrate`.

module ActionController::Base::HelperMethods
  def alert(*args, **_arg1, &block); end
  def combined_fragment_cache_key(*args, **_arg1, &block); end
  def content_security_policy?(*args, **_arg1, &block); end
  def content_security_policy_nonce(*args, **_arg1, &block); end
  def cookies(*args, **_arg1, &block); end
  def form_authenticity_token(*args, **_arg1, &block); end
  def notice(*args, **_arg1, &block); end
  def protect_against_forgery?(*args, **_arg1, &block); end
  def view_cache_dependencies(*args, **_arg1, &block); end
end

module Administrate
  class << self
    def railtie_helpers_paths; end
    def railtie_namespace; end
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end
    def table_name_prefix; end
    def use_relative_model_naming?; end
    def warn_of_deprecated_option(name); end
    def warn_of_missing_resource_class; end
  end
end

class Administrate::ApplicationController < ::ActionController::Base
  def create; end
  def dashboard_class(*_arg0, **_arg1, &_arg2); end
  def destroy; end
  def edit; end
  def index; end
  def namespace(*_arg0, **_arg1, &_arg2); end
  def new; end
  def resource_class(*_arg0, **_arg1, &_arg2); end
  def resource_name(*_arg0, **_arg1, &_arg2); end
  def show; end
  def update; end

  private

  def _layout(lookup_context, formats); end
  def after_resource_created_path(requested_resource); end
  def after_resource_destroyed_path(_requested_resource); end
  def after_resource_updated_path(requested_resource); end
  def apply_collection_includes(relation); end
  def authorize_resource(resource); end
  def dashboard; end
  def default_sorting_attribute; end
  def default_sorting_direction; end
  def find_resource(param); end
  def nav_link_state(resource); end
  def new_resource; end
  def order; end
  def read_param_value(data); end
  def records_per_page; end
  def requested_resource; end
  def resource_params; end
  def resource_resolver; end
  def routes; end
  def scoped_resource; end
  def show_action?(_action, _resource); end
  def show_search_bar?; end
  def sorting_attribute; end
  def sorting_direction; end
  def sorting_params; end
  def translate_with_resource(key); end
  def valid_action?(name, resource = T.unsafe(nil)); end

  class << self
    def __callbacks; end
    def _helper_methods; end
    def middleware_stack; end
  end
end

module Administrate::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods

  def namespace(*args, **_arg1, &block); end
  def nav_link_state(*args, **_arg1, &block); end
  def new_resource(*args, **_arg1, &block); end
  def resource_class(*args, **_arg1, &block); end
  def resource_name(*args, **_arg1, &block); end
  def show_action?(*args, **_arg1, &block); end
  def valid_action?(*args, **_arg1, &block); end
end

module Administrate::ApplicationHelper
  def application_title; end
  def clear_search_params; end
  def dashboard_from_resource(resource_name); end
  def display_resource_name(resource_name, opts = T.unsafe(nil)); end
  def model_from_resource(resource_name); end
  def render_field(field, locals = T.unsafe(nil)); end
  def requireness(field); end
  def resource_index_route(resource_name); end
  def sanitized_order_params(page, current_field_name); end
  def sort_order(order); end

  private

  def default_resource_name(name, opts = T.unsafe(nil)); end
end

Administrate::ApplicationHelper::PLURAL_MANY_COUNT = T.let(T.unsafe(nil), Float)
Administrate::ApplicationHelper::SINGULAR_COUNT = T.let(T.unsafe(nil), Integer)

class Administrate::Engine < ::Rails::Engine
  class << self
    def add_javascript(script); end
    def add_stylesheet(stylesheet); end
    def javascripts; end
    def stylesheets; end
  end
end

class Administrate::Namespace
  # @return [Namespace] a new instance of Namespace
  def initialize(namespace); end

  def resources; end
  def resources_with_index_route; end
  def routes; end

  private

  def all_routes; end

  # Returns the value of attribute namespace.
  def namespace; end
end

class Administrate::Namespace::Resource
  # @return [Resource] a new instance of Resource
  def initialize(namespace, resource); end

  def name; end

  # Returns the value of attribute namespace.
  def namespace; end

  def path; end

  # Returns the value of attribute resource.
  def resource; end

  def to_s; end
  def to_sym; end
end

class Administrate::Order
  # @return [Order] a new instance of Order
  def initialize(attribute = T.unsafe(nil), direction = T.unsafe(nil)); end

  def apply(relation); end

  # Returns the value of attribute direction.
  def direction; end

  def order_params_for(attr); end

  # @return [Boolean]
  def ordered_by?(attr); end

  private

  # Returns the value of attribute attribute.
  def attribute; end

  # @return [Boolean]
  def belongs_to_attribute?(relation); end

  def foreign_key(relation); end

  # @return [Boolean]
  def has_many_attribute?(relation); end

  def opposite_direction; end
  def order_by_association(relation); end
  def order_by_count(relation); end
  def order_by_id(relation); end
  def reflect_association(relation); end
  def reversed_direction_param_for(attr); end
  def sanitize_direction(direction); end
end

module Administrate::Page; end

class Administrate::Page::Base
  # @return [Base] a new instance of Base
  def initialize(dashboard, options = T.unsafe(nil)); end

  def collection_includes; end
  def item_includes; end
  def resource_name; end
  def resource_path; end

  private

  def attribute_field(dashboard, resource, attribute_name, page); end

  # Returns the value of attribute dashboard.
  def dashboard; end

  def get_attribute_value(resource, attribute_name); end

  # Returns the value of attribute options.
  def options; end
end

class Administrate::Page::Collection < ::Administrate::Page::Base
  def attribute_names; end
  def attribute_types; end
  def attributes_for(resource); end
  def order_params_for(attr, key: T.unsafe(nil)); end
  def ordered_by?(*_arg0, **_arg1, &_arg2); end
  def ordered_html_class(attr); end

  private

  def order; end
end

class Administrate::Page::Form < ::Administrate::Page::Base
  # @return [Form] a new instance of Form
  def initialize(dashboard, resource); end

  def attributes(action = T.unsafe(nil)); end
  def page_title; end

  # Returns the value of attribute resource.
  def resource; end

  private

  # Returns the value of attribute dashboard.
  def dashboard; end
end

class Administrate::Page::Show < ::Administrate::Page::Base
  # @return [Show] a new instance of Show
  def initialize(dashboard, resource); end

  def attributes; end
  def page_title; end

  # Returns the value of attribute resource.
  def resource; end
end

module Administrate::Punditize
  include ::Pundit
  extend ::ActiveSupport::Concern
end

class Administrate::ResourceResolver
  # @return [ResourceResolver] a new instance of ResourceResolver
  def initialize(controller_path); end

  def dashboard_class; end
  def namespace; end
  def resource_class; end
  def resource_name; end
  def resource_title; end

  private

  # Returns the value of attribute controller_path.
  def controller_path; end

  def controller_path_parts; end
  def model_path_parts; end
  def resource_class_name; end
end

class Administrate::Search
  # @return [Search] a new instance of Search
  def initialize(scoped_resource, dashboard, term); end

  def run; end

  private

  def apply_filter(filter, filter_param, resources); end

  # @return [Boolean]
  def association_search?(attribute); end

  def attribute_types; end
  def column_to_query(attr); end
  def filter_results(resources); end

  # Returns the value of attribute query.
  def query; end

  def query_table_name(attr); end
  def query_template; end
  def query_values; end

  # Returns the value of attribute resolver.
  def resolver; end

  def search_attributes; end
  def search_results(resources); end
  def searchable_fields(attr); end
  def tables_to_join; end
  def term; end
  def valid_filters; end
end

class Administrate::Search::Query
  # @return [Query] a new instance of Query
  def initialize(original_query, valid_filters = T.unsafe(nil)); end

  # @return [Boolean]
  def blank?; end

  # Returns the value of attribute filters.
  def filters; end

  def original; end
  def terms; end
  def to_s; end

  # Returns the value of attribute valid_filters.
  def valid_filters; end

  private

  # @return [Boolean]
  def filter?(word); end

  def parse_query(query); end
end
